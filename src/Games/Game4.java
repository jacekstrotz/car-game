/* Game4 : Engine Sizing
 * 
 * Description: For my last game, I decided I would do something more difficult.
 * I started with a JSpinner, but unfortunately the JSpinner does not provide
 * easy customizability. After reading through JavaDocs, I setModel for the
 * JSpinner depending on the type of car. For example, gas engine sizes usually
 * only vary 0.1 L at a time, while electric car batteries vary ~10kWh. So, a 
 * spinner with a 0.1 step would not suffice. I encountered some issues with 
 * floating point approximation (6.7 ~ 6.6669999999). I fixed this by checking
 * the absolute value of the difference between the two doubles
 * (String -> Double) by doing Math.abs(input - answer) < 0.1. Since the lowest
 * possible variation is 0.1, a difference of 0.09 would indicate a floating 
 * point approximation. Additionally, I used setEditable in the editor property 
 * to avoid user entry, for cleanliness and user friendliness.
 */

package Games;

import Data.MultiCar;
import Frames.FrameManager;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSpinner.DefaultEditor;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author strotz
 */
public class Game4 extends javax.swing.JFrame {

    String imageFileName;
    Image scaledImage;
    
    double answer;
    
    MyPanel myPanel;
    
    SpinnerNumberModel gasModel = new SpinnerNumberModel(0.5, 0.5, 11.0, 0.1);
    SpinnerNumberModel electricModel = new SpinnerNumberModel(25, 10, 150, 5);
    
    public Game4() {
        initComponents();
        
        MultiCar.Shuffle();
        answer = MultiCar.getIndex(0).getEngine();
        
        if (MultiCar.getIndex(0).getElectric()) {
            stringLabel.setText("What size battery does this car have?");
            litersLabel.setText("kWh");
            
            sizeSpinner.setModel(electricModel);
            ((DefaultEditor) sizeSpinner.getEditor()).getTextField().setEditable(false);
        } else {
            stringLabel.setText("What size engine does this car have?");
            litersLabel.setText("Liters");
            
            sizeSpinner.setModel(gasModel);
            ((DefaultEditor) sizeSpinner.getEditor()).getTextField().setEditable(false);
        }
        
        answerLabel.setText("");
        
        imageFileName = MultiCar.getIndex(0).getFile();
        try {
            scaledImage = ImageIO.read(new File(MultiCar.getIndex(0).getFile()))
                    .getScaledInstance( 150, 150, Image.SCALE_DEFAULT);
        } catch (IOException e) {
            System.out.println("[DEBUG] file-read failure");
        }

        myPanel = new MyPanel(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainLabel = new javax.swing.JLabel();
        returnButton = new javax.swing.JButton();
        stringLabel = new javax.swing.JLabel();
        label1 = new javax.swing.JLabel();
        answerLabel = new javax.swing.JLabel();
        nextButton = new javax.swing.JButton();
        sizeSpinner = new javax.swing.JSpinner(gasModel);
        litersLabel = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 400));

        mainLabel.setFont(new java.awt.Font(".SF NS Text", 0, 24)); // NOI18N
        mainLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainLabel.setText("Game 4");

        returnButton.setText("<--");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        stringLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stringLabel.setText("What size engine does this car have?");

        label1.setText("Answer:");

        answerLabel.setText("[PLACEHOLDER]");

        nextButton.setText(">");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        ((DefaultEditor) sizeSpinner.getEditor()).getTextField().setEditable(false);
        sizeSpinner.setValue(0.5);

        litersLabel.setText("Liters");

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stringLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(nextButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(returnButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(label1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(answerLabel))
                                            .addComponent(sizeSpinner))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(litersLabel)))
                                .addGap(22, 22, 22)))
                        .addGap(85, 85, 85)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(returnButton)
                    .addComponent(mainLabel))
                .addGap(202, 202, 202)
                .addComponent(stringLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 21, Short.MAX_VALUE)
                    .addComponent(litersLabel))
                .addGap(11, 11, 11)
                .addComponent(submitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label1)
                    .addComponent(answerLabel))
                .addGap(19, 19, 19)
                .addComponent(nextButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        FrameManager.displayFrame(this, "Main");
    }//GEN-LAST:event_returnButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        MultiCar.Shuffle();
        
        answer = MultiCar.getIndex(0).getEngine();
        if (MultiCar.getIndex(0).getElectric()) {
            stringLabel.setText("What size battery does this car have?");
            litersLabel.setText("kWh");
            sizeSpinner.setModel(electricModel);
            ((DefaultEditor) sizeSpinner.getEditor()).getTextField().setEditable(false);
        } else {
            stringLabel.setText("What size engine does this car have?");
            litersLabel.setText("Liters");
            sizeSpinner.setModel(gasModel);
            ((DefaultEditor) sizeSpinner.getEditor()).getTextField().setEditable(false);
        }
        
        answerLabel.setText("");
        
        imageFileName = MultiCar.getIndex(0).getFile();
        try {
            scaledImage = ImageIO.read(new File(MultiCar.getIndex(0).getFile()))
                    .getScaledInstance( 150, 150, Image.SCALE_DEFAULT);
            
            this.repaint();
        } catch (IOException e) {
            System.out.println("[DEBUG] file-read failure");
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        if (Math.abs(Double.parseDouble(sizeSpinner.getValue().toString()) - answer) < 0.1) {
            answerLabel.setText("CORRECT");
            answerLabel.setForeground(Color.GREEN);
        } else {
            answerLabel.setText("INCORRECT");
            answerLabel.setForeground(Color.RED);
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game4().setVisible(true);
            }
        });
    }
    
    class MyPanel extends JPanel {

        MyPanel(JFrame theFrame) {
            this.setSize(420, 300);
            this.setLocation(127, 55);
            this.setBackground(Color.white);

            theFrame.add(this);
        }

        public void paintComponent(Graphics g) {
            if (scaledImage == null)
                return;

            g.setColor(Color.BLACK);
            g.fillRect(4,4,152,152);
            g.drawImage(scaledImage, 5, 5, this);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel answerLabel;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel litersLabel;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JSpinner sizeSpinner;
    private javax.swing.JLabel stringLabel;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
